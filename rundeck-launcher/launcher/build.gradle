archivesBaseName = 'rundeck-launcher'
defaultTasks 'clean','launcherJar'
dependsOn(':rundeck-jetty-server')
launcherMainClass = "com.dtolabs.rundeck.ExpandRunServer"
launcherStartClass = "com.dtolabs.rundeck.RunServer"
launcherJettyLibs = "servlet-api-2.5-20081211.jar jetty-${jettyVersion}.jar jetty-util-${jettyVersion}.jar jetty-naming-${jettyVersion}.jar jetty-plus-${jettyVersion}.jar"
launcherJettyLibsUnexpanded = 'servlet-api-2.5-20081211.jar jetty-${jettyVersion}.jar jetty-util-${jettyVersion}.jar jetty-naming-${jettyVersion}.jar jetty-plus-${jettyVersion}.jar'
launcherJettyLibPath = "pkgs/webapp/WEB-INF/lib"

configurations{
    warBundle
    jettyServerLib
    pluginFiles
}

dependencies {
    compile(
        //[group: 'log4j', name: 'log4j', version: '1.2.16',ext:'jar'],
        [group: 'commons-cli', name: 'commons-cli', version: '1.0',ext:'jar'],
    )
    warBundle(
        [group: 'com.dtolabs.rundeck', name: 'rundeck', version: version,ext:'war']
    )
    pluginFiles(
        [group: 'com.dtolabs.rundeck', name: 'rundeck-script-plugin', version: version,ext:'jar'],            
        [group: 'com.dtolabs.rundeck', name: 'rundeck-stub-plugin', version: version,ext:'jar']
    )
    jettyServerLib project(":rundeck-jetty-server")
}

task expandCli << {
    //copy libs to a tools lib dir
    ant.mkdir(dir:"$projectDir/build/launcher-contents")
    dep = configurations.compile.allDependencies.find { dep -> dep.name == 'commons-cli' }
    FileTree cliJar = zipTree(configurations.compile.files(dep).find{it})
    copy{
        from cliJar
        exclude 'META-INF/**'
        into "$projectDir/build/launcher-contents"
    }
}
task expandWar << {
    //copy libs to a tools lib dir
    ant.mkdir(dir:"$projectDir/build/launcher-contents/pkgs/webapp")
    FileTree rundeckWar = zipTree(configurations.warBundle.files.find{ file -> file})
    copy{
        from rundeckWar
        into "$projectDir/build/launcher-contents/pkgs/webapp"
    }
}

task copyJettyServerLib << {
    ant.mkdir(dir:"$projectDir/build/launcher-contents/lib")
    serverlibjar = configurations.jettyServerLib.files.find{ file -> file}
    copy{
        from serverlibjar
        into "$projectDir/build/launcher-contents/lib"
    }
}
task copyPluginLibs << {
    ant.mkdir(dir:"$projectDir/build/launcher-contents/libext")
    configurations.pluginFiles.files.each{ pluginFile->
        copy{
            from pluginFile
            into "$projectDir/build/launcher-contents/libext"
        }
    }
}


task launcherJar(type:Jar) {
    from "$projectDir/build/launcher-contents"
    from sourceSets.main.classes
    exclude 'com/dtolabs/rundeck/RunServer.class'
    manifest {
        attributes 'Rundeck-Version': version, 'Main-Class':"${launcherMainClass}", "Rundeck-Start-Class":"${launcherStartClass}", "Rundeck-Jetty-Libs":"${launcherJettyLibs}", "Rundeck-Jetty-Lib-Path":"${launcherJettyLibPath}"
    }
}

launcherJar.dependsOn << expandCli
launcherJar.dependsOn << expandWar
launcherJar.dependsOn << copyJettyServerLib
launcherJar.dependsOn << copyPluginLibs


apply plugin: 'maven'
task createPom << {
    pom {
        project {
            artifactId archivesBaseName
            groupId "com.dtolabs.rundeck"
            inceptionYear '2011'
            packaging 'jar'
            version version
            name "Rundeck Launcher"
            url 'http://rundeck.org'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            properties{
                'jettyVersion'(jettyVersion)
                'launcherStartClass'(launcherStartClass)
                'launcherMainClass'(launcherMainClass)
                'launcherJettyLibPath'(launcherJettyLibPath)
            }
            build {
                plugins{
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-compiler-plugin'
                        version '2.3.2'
                        configuration{
                            'source'('1.5')
                            'target'('1.5')
                        }
                    }
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-assembly-plugin'
                        version '2.2.2'
                        configuration{
                            appendAssemblyId('false')
                            descriptors{
                                descriptor('src/main/assembly/src.xml')
                            }
                            archive{
                              manifestEntries{
                                'Rundeck-Version'('${project.version}')  
                                'Rundeck-Start-Class'('${launcherStartClass}')
                                'Main-Class'('${launcherMainClass}')
                                'Rundeck-Jetty-Libs'(launcherJettyLibsUnexpanded)
                                'Rundeck-Jetty-Lib-Path'('${launcherJettyLibPath}')
                              }
                            }
                        }
                        executions{
                            execution{
                                id 'make-assembly'
                                phase 'package'
                                goals{
                                    goal 'single'
                                }
                            }
                        }
                    }
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-jar-plugin'
                        version '2.3.2'
                        configuration{
                            classifier 'code'
                        }
                    }
                }
            }
            dependencies{
                (configurations.warBundle.dependencies).each{ dep ->
                    dependency{
                        groupId dep.group
                        artifactId dep.name
                        version dep.version
                        type 'war'
                    }
                }
                (configurations.jettyServerLib.dependencies + configurations.pluginFiles.dependencies).each{ dep ->
                    dependency{
                        groupId dep.group
                        artifactId dep.name
                        version dep.version
                        type 'jar'
                    }
                }
            }
        }
    }.writeTo("pom.xml")
}