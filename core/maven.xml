<!--
  ** Maven's config 
-->

<project default="java:compile"
         xmlns:u="jelly:util"
         xmlns:j="jelly:core">

  <property environment="env"/>
	

  <property name="target.dir" value="${maven.build.dir}"/>
  <property name="classes.dir" value="${target.dir}/classes"/>
  <property name="src.sh.dir" value="${src.dir}/sh"/>
  <property name="src.java.dir" value="${src.dir}/java"/>

  <property name="dist.dir" value="${maven.dist.dir}"/>


    <!-- org.opendepo tasks and type defs -->
    <property name="rdeck.antTasks.subDir" value="com/dtolabs/rundeck/core/tasks"/>
  <property name="rdeck.antTypes.subDir" value="com/dtolabs/rundeck/core/types"/>

  <property name="antTasks.subDirs" value="${rdeck.antTasks.subDir}"/>
  <property name="antTypes.subDirs" value="${rdeck.antTypes.subDir}"/>

  <property name="taskdef.template" value="${src.java.dir}/taskdef.template"/>
  <property name="typedef.template" value="${src.java.dir}/typedef.template"/>


    <!-- pattern sets for tar binary distribution relative to target-->
    <patternset id="tgz-launcher-bin">
     <include name="bin/**"/>
     <exclude name="dist/**"/>
  </patternset>

  <patternset id="tgz-bin">
     <include name="*/**"/>
     <exclude name="tests"/>
     <exclude name="bin/**"/>
     <exclude name="*.jar"/>
     <exclude name="*.zip"/>
     <exclude name="*.tar"/>
     <exclude name="*.cab"/>
     <exclude name="*.gz"/>
     <exclude name="*.tgz"/>
     <exclude name="test-*/**"/>
     <exclude name="classes/**"/>
     <exclude name="Manifest.mf"/>
     <exclude name="rdeck_base/**"/>
     <exclude name="dist/**"/>
  </patternset>

    <!-- pattern sets for source distribution relative to checkout root-->
    <patternset id="tgz-src">
     <include name="src/**"/>
     <include name="maven.xml"/>
     <include name="project.xml"/>
     <include name="project.properties"/>
     <include name="log4j.properties"/>
     <include name="profile.template"/>
     <exclude name="dist/**"/>
  </patternset>
  <patternset id="tgz-src-maven-bin">
     <include name="maven/**"/>
     <include name="build.sh"/>
     <exclude name="dist/**"/>
  </patternset>


  <property name="ant.version" value="1.8.1"/>
  <property name="ant.pkg.dirName" value="apache-ant-${ant.version}"/>

    <!--
    ** source path to JavaeConstants class and template, which is templatized prior to java:compile
    -->
    <property name="VersionConstants.java" value="${src.dir}/java/com/dtolabs/rundeck/core/VersionConstants.java"/>
    <property name="VersionConstants.java.template"
              value="${src.dir}/java/com/dtolabs/rundeck/core/VersionConstants.java.template"/>


  <preGoal name="test:test">
     <attainGoal name="java:copy-test-resources"/>
     <attainGoal name="rdeck:framework"/>
     <attainGoal name="rdeck:createTestBaseDir"/>
  </preGoal> 

  <preGoal name="test:single">
     <attainGoal name="java:copy-test-resources"/>
     <attainGoal name="rdeck:framework"/>
     <attainGoal name="rdeck:createTestBaseDir"/>
  </preGoal> 

  <preGoal name="java:jar">
     <attainGoal name="java:copy-resources"/>
  </preGoal>
  <goal name="java:copy-resources">
    <echo>Copying .xsl files from ${src.dir}/java/
        to ${target.dir}/classes/</echo>
         <copy todir="${target.dir}/classes/"
               overwrite="true"
               filtering="false">
           <fileset dir="${src.dir}/java/">
               <include name="**/*.xsl"/>
               <include name="**/*.dtd"/>
           </fileset>
      </copy>
      <mkdir dir="${target.dir}/classes/com/dtolabs/launcher/setup/templates"/>
      <copy todir="${target.dir}/classes/com/dtolabs/launcher/setup/templates" overwrite="true" filtering="false">
         <fileset dir="${src.dir}/templates/etc">
            <include name="*"/>
         </fileset>
      </copy>
      <mkdir dir="${target.dir}/classes/com/dtolabs/rundeck/core/cli/templates"/>
      <copy todir="${target.dir}/classes/com/dtolabs/rundeck/core/cli/templates" overwrite="true" filtering="false">
         <fileset dir="${src.dir}/sh">
            <include name="*"/>
         </fileset>
      </copy>

      <!-- create dependencies list -->
      <j:set var="deps.list" value=""/>
      <j:forEach var="dep" items="${pom.dependencies}">
          <j:set var="dep.id" value="${dep.getId()}"/>
          <j:set var="dep.version" value="${dep.getVersion()}"/>
          <j:set var="expanded.name" value="${dep.id}-${dep.version}"/>
          <j:if test="${dep.getProperty('war.bundle.jar') == 'true'}">
              <j:set var="deps.list" value="${deps.list}${dep.id}-${dep.version}.jar "/>
          </j:if>
      </j:forEach>
      <delete  file="${target.dir}/Manifest.mf"/>
      <echo  append="true" file="${target.dir}/Manifest.mf">Rundeck-Tools-Dependencies: ${deps.list}${line.separator}</echo>
  </goal>
  <goal name="java:copy-test-resources">
    <echo>Copying .xsl, .dtd and .aclpolicy files from ${src.dir}/java/ and ${src.dir}/test
        to ${target.dir}/test-classes/</echo>
         <copy todir="${target.dir}/test-classes/"
               overwrite="true"
               filtering="false">
           <fileset dir="${src.dir}/java/">
               <include name="**/*.xsl"/>
               <include name="**/*.dtd"/>
           </fileset>
         </copy>
         <copy todir="${target.dir}/classes" overwrite="true" filtering="false">
            <fileset dir="${src.dir}/test/">
            	  <include name="**/*.aclpolicy"/>
         	</fileset>
      </copy>

      <mkdir dir="${target.dir}/test-classes/com/dtolabs/launcher/setup/templates"/>
      <copy todir="${target.dir}/test-classes/com/dtolabs/launcher/setup/templates" overwrite="true" filtering="false">
         <fileset dir="${src.dir}/templates/etc">
            <include name="*"/>
         </fileset>
      </copy>
  </goal>

  <postGoal name="java:jar">

  </postGoal>

  <goal name="javadoc:generate">
      <!-- this goal overrides the builtin maven javadoc plugin, to allow source="1.5" -->
      <mkdir dir="${target.dir}/apidocs"/>
      <javadoc classpathref="maven.dependency.classpath" source="1.5"
               destdir="${target.dir}/apidocs">
          <fileset dir="${src.java.dir}">
              <include name="**/*.java"/>
          </fileset>
      </javadoc>
  </goal>


  <goal name="verify-design"
        description="expose design dependencies in the autogenerated jar">

     <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
           <fileset dir="${maven.home}/repository">
              <include name="ant-contrib-build/jars/ant-contrib-build-1.0b2.jar"/>
              <include name="bcel/jars/bcel-5.1.jar"/>
           </fileset>
        </classpath>
     </taskdef>

     <verifydesign jar="${target.dir}/${pom.id}-${pom.currentVersion}.jar"
                   design="${src.dir}/design.xml"/>

  </goal>


  <postGoal name="java:compile">
     <attainGoal name="rdeck:generate-defs"/>
  </postGoal>
  <preGoal name="java:compile">
      <tstamp/>
      <!-- load the version.properties file if it exist, otherwise create the expected properties from a
      Datestamp -->
      <available file="${version.properties}"
                 type="file"
                 property="version.properties.exists"/>

      <j:set var="versionPropertiesExists" value="${version.properties.exists}"/>
      <j:if test="${versionPropertiesExists == 'true'}">
            <property file="${version.properties}"/>
      </j:if>
       <j:if test="${versionPropertiesExists != 'true'}">
            <property name="version.build" value="${DSTAMP}"/>
            <property name="version.number" value="${pom.currentVersion}"/>
            <property name="version.ident" value="${pom.currentVersion}.${DSTAMP}"/>
      </j:if>
      <property name="rdeck.build" value="${version.build}"/>
      <property name="rdeck.version" value="${pom.currentVersion}"/>
      <echo level="info">build ident: ${version.ident}</echo>
      <attainGoal name="java:expand-templates"/>
  </preGoal>

    <goal name="java:expand-templates"
          description="expands VersionConstants.java from template">
      <fail unless="version.build">version.build not defined</fail>
      <fail unless="version.number">version.number not defined</fail>
      <fail unless="version.ident">version.ident not defined</fail>
      <fail unless="VersionConstants.java">VersionConstants.java not defined</fail>
      <fail unless="VersionConstants.java.template">VersionConstants.java.template not defined</fail>

      <copy file="${VersionConstants.java.template}"
            tofile="${VersionConstants.java}"
            overwrite="true"
            filtering="true">
         <filterset>
            <filter token="version.number" value="${version.number}"/>
            <filter token="version.build" value="${version.build}"/>
            <filter token="version.ident" value="${version.ident}"/>
         </filterset>
      </copy>
   </goal>


  <goal name="docs" prereqs="forrest"> 
     <zip destfile="${target.dir}/${pom.id}-${pom.currentVersion}.zip"
          basedir="${forrest.site.dir}"/>
  </goal>


    <!-- convenience properties for generation of the tarball and jar files -->
    <!--<property name="pkg.type" value="tar.gz"/>-->
    <property name="pkg.type" value="tgz"/>
  <property name="pkg.file" value="${pom.id}-${pom.currentVersion}.${pkg.type}"/>
  <property name="rdeck.jar.file" value="rundeck-core-${pom.currentVersion}.jar"/>


    <!--  make zip -->
    <goal name="rdeck:zip" prereqs="rdeck:tgz" description="generate an rdeck zip">
      <echo>Creating zip file from contents of target.dir: ${target.dir}...</echo>
      <mkdir dir="${dist.dir}/zips"/>
      <delete file="${dist.dir}/zips/${pom.id}-${pom.currentVersion}.zip"/>
      <zip destfile="${dist.dir}/zips/${pom.id}-${pom.currentVersion}.zip" verbose="no">

          <fileset dir="${target.dir}" mode="755">
             <patternset refid="tgz-launcher-bin"/>
          </fileset> 
          <fileset dir="${target.dir}"> 
             <patternset refid="tgz-bin"/>
          </fileset> 
      </zip>
  </goal>



    <!-- generate an rdeck tarball -->
    <goal name="rdeck:tgz" prereqs="rdeck"
          description="generates a binary rdeck tarball">
     <mkdir dir="${dist.dir}/tgzs"/>
     <delete file="${dist.dir}/tgzs/${pom.id}.${pom.currentVersion}.tar"/>

     <tar longfile="gnu"
          destfile="${dist.dir}/tgzs/${pom.id}.${pom.currentVersion}.tar">
         <tarfileset dir="${target.dir}" mode="755">
            <patternset refid="tgz-launcher-bin"/>
         </tarfileset> 
         <tarfileset dir="${target.dir}"> 
            <patternset refid="tgz-bin"/>
         </tarfileset> 
      </tar>
     <gzip src="${dist.dir}/tgzs/${pom.id}.${pom.currentVersion}.tar"
           zipfile="${dist.dir}/tgzs/${pkg.file}"/>
     <delete file="${dist.dir}/tgzs/${pom.id}.${pom.currentVersion}.tar"/>
  </goal> 

  <goal name="rdeck:stgz" prereqs="rdeck"
        description="generates a source/binary rdeck tarball">
     <delete file="${target.dir}/${pom.id}-${pom.currentVersion}-source.tar"/>
     <tar longfile="gnu"
          destfile="${target.dir}/${pom.id}-${pom.currentVersion}-source.tar">
         <tarfileset dir="${target.dir}" mode="755">
            <patternset refid="tgz-launcher-bin"/>
         </tarfileset>
         <tarfileset dir="${target.dir}">
            <patternset refid="tgz-bin"/>
         </tarfileset>
         <tarfileset dir="${basedir}">
            <patternset refid="tgz-src"/>
         </tarfileset>
         <tarfileset dir="${basedir}" mode="755">
            <patternset refid="tgz-src-maven-bin"/>
         </tarfileset>
      </tar>
     <gzip src="${target.dir}/${pom.id}-${pom.currentVersion}-source.tar"
           zipfile="${target.dir}/${pom.id}-${pom.currentVersion}-source.tar.gz"/>
     <delete file="${target.dir}/${pom.id}-${pom.currentVersion}-source.tar"/>
  </goal> 

  <goal name="rdeck" prereqs="java:jar,rdeck:framework" description="builds the rdeck framework">
     <!-- copy jar into ant pkg lib -->
      <property name="target.lib.dir" value="${target.dir}/tools/lib"/>
      <mkdir dir="${target.lib.dir}"/>
     <copy file="${target.dir}/${rdeck.jar.file}"
           tofile="${target.lib.dir}/${rdeck.jar.file}"
           overwrite="true"/>

      <j:forEach var="dep" items="${pom.dependencies}">
          <j:set var="dep.id" value="${dep.getId()}"/>
          <j:set var="dep.version" value="${dep.getVersion()}"/>
          <j:set var="expanded.name" value="${dep.id}-${dep.version}"/>
          <j:if test="${dep.getProperty('war.bundle.jar') == 'true'}">
              <echo>copy dependency: ${dep.id}-${dep.version}.jar</echo>
                <copy file="${maven.home}/repository/${dep.id}/jars/${dep.id}-${dep.version}.jar"
                      tofile="${target.lib.dir}/${dep.id}-${dep.version}.jar"

                    />
            </j:if>
      </j:forEach>

  </goal> 

  <goal name="rdeck:createTestBaseDir">
     <mkdir dir="${target.dir}/rdeck_base/projects"/>
     <mkdir dir="${target.dir}/rdeck_base/etc"/>
  </goal>

  <goal name="rdeck:framework" prereqs="rdeck:copyCore"
        description="builds the rdeck framework">
      <chmod perm="a+x">
         <fileset dir="${target.dir}/bin">
            <include name="**/*"/>
         </fileset>
      </chmod>

  </goal>

  <goal name="rdeck:copyCore" prereqs="rdeck:mkdirs"
        description="copies framework source into target build area">
      <!--
           copy
           src/sh/**/* to target/bin/**/*
        -->
      <copy todir="${target.dir}/bin">
        <fileset dir="${src.sh.dir}">
            <include name="**/*"/>
         </fileset>
     </copy>
      <!--
           copy
           src/etc/**/* to target/etc/**/*
        -->
      <copy todir="${target.dir}">
         <fileset dir="${src.dir}">
            <include name="etc/**/*"/>
         </fileset>
      </copy>

  </goal>


  <goal name="rdeck:mkdirs"
        description="creates target build directories">
     <mkdir dir="${target.dir}/bin"/>
  </goal>


  <goal name="rdeck:generate-defs" description="generates taskdef and typedef properties files">
    <echo>DEBUG, rdeck.antTasks.subDir: ${rdeck.antTasks.subDir}</echo>
    <echo>DEBUG, antTasks.subDirs: ${antTasks.subDirs}</echo>

    <taskdef
        name="xdoclet"
        classpathref="maven.dependency.classpath"
        classname="xdoclet.DocletTask"/>

     <u:tokenize var="antTasks.subDirs" delim=",">${antTasks.subDirs}</u:tokenize>
     <u:tokenize var="antTypes.subDirs" delim=",">${antTypes.subDirs}</u:tokenize>

     <j:forEach var="subDir" items="${antTasks.subDirs}">
        <j:set var="def.type" value="taskdef.properties"/>
        <j:set var="def.template" value="${taskdef.template}"/>
        <attainGoal name="rdeck:generate-def"/>
     </j:forEach>

     <j:forEach var="subDir" items="${antTypes.subDirs}">
        <j:set var="def.type" value="typedef.properties"/>
        <j:set var="def.template" value="${typedef.template}"/>
        <attainGoal name="rdeck:generate-def"/>
     </j:forEach>

  </goal>

  <goal name="rdeck:generate-def"
        description="generates a taskdef or typedef properties file">

      <echo
          level="info">generating taskdef properties to ${classes.dir}/${subDir}/${def.type} from ${def.template}</echo>

      <xdoclet verbose="true"
               force="true"
               destdir="${classes.dir}/${subDir}">
          <fileset dir="${src.java.dir}">
             <include name="${subDir}/**/*.java"/>
          </fileset>
          <template templateFile="${def.template}"
                    destinationFile="${def.type}">
             <configParam name="date" value="${DSTAMP} @ ${TSTAMP}"/>
          </template>
      </xdoclet>
  </goal>




</project>
