<?xml version="1.0"?>

<jj:project xmlns:j="jelly:core" xmlns:jj="jelly:jeez" xmlns="dummy">

  <!-- ================================================================== -->
  <!-- A N T  B U I L D  G E N E R A T O R                                -->
  <!-- ================================================================== -->
  <!-- This plugin generates a stand alone ant build.xml file that can be -->
  <!-- used without having Maven installed. The dependencies are          -->
  <!-- retrieved using the ant <get> task and then the standard <javac>   -->
  <!-- and <jar> tasks are used to produce a JAR. This is primarily for   -->
  <!-- people who want to build from sources but don't want to use Maven. -->
  <!-- ================================================================== -->

  <jj:goal name="ant"
           description="Generate an Ant build file"
           prereqs="ant:generate-build"/>

  <jj:goal
    name="ant:generate-build"
    description="Generate an Ant build file">

    <j:file name="build.xml">
    <j:whitespace>
<project name="${pom.id}" default="jar" basedir=".">
  
  <property name="defaulttargetdir" value="target"/> 
  <property name="classesdir" value="target/classes"/>
  <property name="testclassesdir" value="target/test-classes"/>
  <property name="testreportdir" value="target/test-reports"/>
  <property name="distdir" value="dist"/>
  <property name="javadocdir" value="target/docs/apidocs"/>
  <property name="final.name" value="${maven.final.name}"/>
  
  <target 
    name="init"
    description="o Initializes some properties">

    <condition property="noget">
      <equals arg1="$${build.sysclasspath}" arg2="only"/>
    </condition>
  </target>

  <target
    name="compile"
    depends="get-deps"
    description="o Compile the code">
    
    <mkdir dir="$${classesdir}"/>

    <javac
      destdir="$${classesdir}"
      excludes="**/package.html"
      debug="true"
      deprecation="true"
      optimize="false">
      <src>
        <pathelement location="${pom.build.sourceDirectory}"/>
      </src>
      <classpath>
        <fileset dir="lib">
          <include name="*.jar"/>
        </fileset>
      </classpath>
    </javac>
    
    <j:if test="${maven.has.jar.resource.patterns}">
 
    <!-- Copy any resources that must be present in the deployed
         JAR file.
    -->
 
    <copy todir="$${classesdir}">
      
      <!--
      
      This will not work as we don't want the values of the user generating
      the build file to be used. For now we will assume ${basedir} but we
      will need a way to extract the literal value out of the properties
      file because ${maven} values can't be used because ant using don't
      have maven installed. Assume ${basedir} for now, find a better
      solution later.
      
      <fileset dir="${maven.jarResources.basedir}">
      
      -->
      
      <fileset dir="$${basedir}">
      
      <j:forEach var="res" items="${pom.build.resources.includes}">
        <include name="${res}"/>
      </j:forEach>
      <j:forEach var="res" items="${pom.build.resources.excludes}">
        <exclude name="${res}"/>
      </j:forEach>
      </fileset>
    </copy>
 
    </j:if>

  </target>
    
  <target
    name="jar"
    depends="compile,test"
    description="o Create the jar">

    <jar
      jarfile="target/$${final.name}.jar"
      basedir="$${classesdir}"
      excludes="**/package.html"
    />

  </target>
  
  <target
    name="clean"
    description="o Clean up the generated directories">
    <delete dir="$${defaulttargetdir}"/>
    <delete dir="$${distdir}"/>
  </target>

  <target
    name="dist"
    depends="jar, javadoc"
    description="o Create a distribution">
    <mkdir dir="dist"/>
    <copy todir="dist">
      <fileset dir="$${defaulttargetdir}"/>
    </copy>
  </target>
 
  <target
    name="test"
    depends="compile-tests"
    description="o Run the test cases">
    <mkdir dir="$${testreportdir}"/>
    <junit printSummary="yes"
           haltonerror="true"
           fork="true"
           dir="./">
      <sysproperty key="basedir" value="${pom.build.unitTestSourceDirectory}"/>
      <formatter type="xml"/>
      <formatter type="plain" usefile="true"/>
      <classpath>
        <fileset dir="lib">
          <include name="*.jar"/>
        </fileset>
        <pathelement location="target/$${final.name}.jar"/>
        <pathelement path="$${testclassesdir}"/>
      </classpath>
      <batchtest todir="$${testreportdir}">
        <fileset dir="${pom.build.unitTestSourceDirectory}">
              <j:forEach var="pat" items="${pom.build.unitTest.includes}">
                <include name="${pat}"/>
              </j:forEach>
              <j:forEach var="pat" items="${pom.build.unitTest.excludes}">
                <exclude name="${pat}"/>
              </j:forEach>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target 
    name="compile-tests"
    depends="compile">
    <mkdir dir="$${testclassesdir}"/>
    <javac
      destdir="$${testclassesdir}"
      excludes="**/package.html"
      debug="true"
      deprecation="true"
      optimize="false">
      <src>
        <pathelement location="${pom.build.unitTestSourceDirectory}"/>
      </src>
      <classpath>
        <fileset dir="lib">
          <include name="*.jar"/>
        </fileset>
        <pathelement location="target/$${final.name}.jar"/>
      </classpath>
    </javac>

    <j:choose trim="true">
      <j:when test="${!pom.build.unitTest.resources.includes.isEmpty()}">
         <j:set var="maven.has.test.resource.patterns" value="true"/>
       </j:when>
       <j:when test="${!pom.build.unitTest.resources.excludes.isEmpty()}">
         <j:set var="maven.has.test.resource.patterns" value="true"/>
       </j:when>
    </j:choose>
   
    <j:if test="${maven.has.test.resource.patterns}">
 
    <copy todir="$${testclassesdir}">
      <fileset dir="${pom.build.unitTestSourceDirectory}">
      <j:forEach var="res" items="${pom.build.unitTest.resources.includes}">
         <include name="${res}"/>
      </j:forEach>
      <j:forEach var="res" items="${pom.build.unitTest.resources.excludes}">
         <exclude name="${res}"/>
      </j:forEach>
      </fileset>
    </copy>
    </j:if>
  </target>

  <target
    name="javadoc"
    depends="jar"
    description="o Generate javadoc">
 
 
    <mkdir dir="$${javadocdir}"/>
 
    <!-- Get the year to display in the Javadocs -->
    <tstamp>
      <format property="year" pattern="${pom.inceptionYear}-yyyy"/>
    </tstamp>
 
    <property
      name="copyright"      
      value="Copyright &amp;copy; ${year} ${pom.organization.name}. All Rights Reserved."
    />
 
    <property
      name="title"
      value="${pom.name} ${pom.currentVersion} API"
    />
 
    <javadoc
      sourcepath="${pom.build.sourceDirectory}"
      packagenames="${pom.package}.*"
      destdir="$${javadocdir}"
      author="true"
      private="true"
      version="true"
      use="true"
      windowtitle="${title}"
      doctitle="${title}"
      bottom="${copyright}">
      <classpath>
        <fileset dir="lib">
          <include name="*.jar"/>
        </fileset>
        <pathelement location="target/$${final.name}.jar"/>
      </classpath>
    </javadoc>
 
  </target>

  <target
    name="get-deps"
    depends="init"
    unless="noget">
  
    <mkdir dir="lib"/>
    <j:forEach var="dep" items="${pom.dependencies}">
    <get 
      src="${maven.repo.remote}/${dep.id}/jars/${dep.jar}"
      dest="lib/${dep.jar}"
      usetimestamp="true"
      ignoreerrors="true"
    /></j:forEach>
    <!-- force junit for tests -->
    <get 
      src="${maven.repo.remote}/junit/jars/junit-3.8.1.jar"
      dest="lib/junit-3.8.1.jar"
      usetimestamp="true"
      ignoreerrors="true"/>
  
  </target>

  <!-- ================================================================== -->
  <!-- A N T  A U T O  I N S T A L L E R                                  -->
  <!-- ================================================================== -->
  <!-- For users that have Ant installed Maven can be automatically       -->
  <!-- installed by answering a few simple questions. We only need to     -->
  <!-- know what the user wants for ${maven.home} and ${maven.repo.local} -->
  <!-- and we're set.                                                     -->
  <!-- ================================================================== -->

  <target
    name="install-maven">

    <!--
    
    Ask the user what they would like to use for
    
    ${maven.home}
    ${maven.repo.local}
    
    -->

    <get 
      src="$${maven.repo.remote}/maven/maven-install-latest.jar"
      dest="$${user.home}/maven-install-latest.jar"
      usetimestamp="true"
    />
    
    <unjar
      src="$${user.home}/maven-install-latest.jar"
      dest="$${maven.home}"
    />
    
  </target>

</project>
    </j:whitespace>
    </j:file>
  
  </jj:goal>
  
</jj:project>
