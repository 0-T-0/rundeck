<?xml version="1.0"?>

<project xmlns:j="jelly:core" xmlns:u="jelly:util">

  <j:choose>
    <j:when test="${pom.build.testResources == null}">
      <j:set var="maven.has.test.resource.patterns" value="false"/>
    </j:when>
    <j:when test="${pom.build.testResources.isEmpty()}">
      <j:set var="maven.has.test.resource.patterns" value="false"/>
    </j:when>
    <j:otherwise>
      <j:set var="maven.has.test.resource.patterns" value="true"/>
    </j:otherwise>
  </j:choose>
  
  <goal name="test" 
        description="Test the application"
        prereqs="test:test"/>

  <goal name="test:prepare-filesystem"
        description="Create the needed directory structure">
    <mkdir dir="${maven.test.dest}"/>
    <mkdir dir="${maven.test.reportsDirectory}"/>
  </goal>
 
  <goal name="test:compile"
        description="Compile the TestCases and TestSuites"
        prereqs="java:compile,java:jar-resources,test:prepare-filesystem,test:test-resources">

    <j:if test="${unitTestSourcesPresent}">
    
      <javac 
        destdir="${maven.test.dest}"
        excludes="**/package.html"
        debug="${maven.compile.debug}"
        deprecation="${maven.compile.deprecation}"
        optimize="${maven.compile.optimize}">
        <classpath>
          <pathelement path="${maven.build.dest}"/>
          <path refid="maven.dependency.classpath"/>
          <pathelement path="${plugin.getDependencyPath('junit')}"/>
        </classpath>
        <src>
          <path location="${pom.build.unitTestSourceDirectory}"/>        
        </src>
      </javac>
      <!--
                Copies the resources needed by the tests
      -->
      <j:if test="${maven.has.test.resource.patterns}">
        <copy todir="${maven.test.dest}">
          <fileset dir="${pom.build.unitTestSourceDirectory}">
            <j:forEach var="res" items="${pom.build.unitTest.resources.includes}">
              <include name="${res}"/>
            </j:forEach>
            <j:forEach var="res" items="${pom.build.unitTest.resources.excludes}">
              <exclude name="${res}"/>
            </j:forEach>
          </fileset>
        </copy>
      </j:if>
    </j:if>

    <j:if test="${!unitTestSourcesPresent}">
      <echo>No test source files to compile.</echo>
    </j:if>
      
  </goal>

  <goal name="test:test"
        description="Test the application"
        prereqs="test:compile">

    <j:if test="${unitTestSourcesPresent}">
      
      <taskdef
        name="junit"
        classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
      />
      
      <junit printSummary="yes" 
             failureProperty="maven.test.failure"
             fork="${maven.junit.fork}"
             dir="${maven.junit.dir}">
        <sysproperty key="basedir" value="${basedir}"/>
        <u:tokenize var="listOfProperties" delim=" ">${maven.junit.sysproperties}</u:tokenize>
        <j:forEach var="someProperty" items="${listOfProperties}">
          <sysproperty key="${someProperty}" value="${context.findVariable(someProperty)}"/>
        </j:forEach>
        <formatter type="xml"/>
        <formatter type="plain" usefile="${maven.junit.usefile}"/>
        <classpath>
          <path refid="maven.dependency.classpath"/>
          <pathelement location="${maven.build.dest}"/>
          <pathelement location="${maven.test.dest}"/>
          <pathelement path="${plugin.getDependencyPath('junit')}"/>
        </classpath>
        <batchtest todir="${maven.test.reportsDirectory}">
          <fileset dir="${pom.build.unitTestSourceDirectory}">
            <j:forEach var="pat" items="${pom.build.unitTest.includes}">
              <include name="${pat}"/>
            </j:forEach>
            <j:forEach var="pat" items="${pom.build.unitTest.excludes}">
              <exclude name="${pat}"/>
            </j:forEach>
          </fileset>
        </batchtest>
      </junit>

      <j:if test="${maven.test.failure}">
        <j:set var="ignore__" value="${maven.test.failure.ignore}X"/>
        <j:if test="${ignore__ == 'X'}">
          <fail message="There were test failures."/>
        </j:if>
      </j:if>

    </j:if>
    
    <j:if test="${!unitTestSourcesPresent}">
      <echo>No tests to run.</echo>
    </j:if>

  </goal>

  <goal name="test:ui"
        description="Starts the Swing TestRunner front end"
        prereqs="test:compile">
        
    <java classname="junit.swingui.TestRunner" fork="yes">
        <classpath>
          <path refid="maven.dependency.classpath"/>
          <pathelement location="${maven.build.dest}"/>
          <pathelement location="${maven.test.dest}"/>
        </classpath>
      <arg value="-noloading"/>
    </java>
        
  </goal>


  <goal name="test:single"
        description="Execute a single test defined using the 'testcase' variable"
        prereqs="test:compile">

    <j:if test="${unitTestSourcesPresent}">
    
      <j:choose>
        <j:when test="${empty(testcase)}">
        <echo>
          You must define the test case to run via -Dtestcase=classname
          Example: maven -Dtestcase=MyTest test:single-test
        </echo>
        </j:when>
        
        <j:otherwise>
    
          <taskdef
            name="junit"
            classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
          />

          <junit printSummary="yes" 
                 haltonfailure="yes" 
                 haltonerror="yes" 
                 fork="${maven.junit.fork}"
                 dir="${maven.junit.dir}">
 
            <sysproperty key="basedir" value="${basedir}"/>
            <u:tokenize var="listOfProperties" delim=" ">${maven.junit.sysproperties}</u:tokenize>
            <j:forEach var="someProperty" items="${listOfProperties}">
              <sysproperty key="${someProperty}" value="${context.findVariable(someProperty)}"/>
            </j:forEach>
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <formatter type="plain" usefile="true"/>

            <classpath>
              <path refid="maven.dependency.classpath"/>
              <pathelement location="${maven.build.dest}"/>
              <pathelement location="${maven.test.dest}"/>
            </classpath>

            <test name="${testcase}" todir="${maven.test.reportsDirectory}"/>
            
          </junit>
        
        </j:otherwise>
      </j:choose>
    </j:if>
    
    <j:if test="${!unitTestSourcesPresent}">
      <echo>No tests to run.</echo>
    </j:if>

  </goal>


  <goal name="test:match"
        description="Execute all the tests matching the given 'testmatch' variable"
        prereqs="test:compile">

    <j:if test="${unitTestSourcesPresent}">
    
      <j:choose>
        <j:when test="${empty(testmatch)}">
        <echo>
          You must define the test case to run via -Dtestmatch=pattern
          Example: maven -Dtestmatch=*Foo* test:match-test
        </echo>
        </j:when>
        
        <j:otherwise>
    
          <taskdef
            name="junit"
            classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
          />
    
          <junit printSummary="yes" 
                 haltonfailure="yes" 
                 haltonerror="yes" 
                 fork="${maven.junit.fork}"
                 dir="${maven.junit.dir}">
 
            <sysproperty key="basedir" value="${basedir}"/>
            <u:tokenize var="listOfProperties" delim=" ">${maven.junit.sysproperties}</u:tokenize>
            <j:forEach var="someProperty" items="${listOfProperties}">
              <sysproperty key="${someProperty}" value="${context.findVariable(someProperty)}"/>
            </j:forEach>
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <formatter type="plain" usefile="true"/>

            <classpath>
              <path refid="maven.dependency.classpath"/>
              <pathelement location="${maven.build.dest}"/>
              <pathelement location="${maven.test.dest}"/>
            </classpath>

            <batchtest todir="${maven.test.reportsDirectory}">
              <fileset dir="${pom.build.unitTestSourceDirectory}">
                <include name="**/${testmatch}.java"/>
              </fileset>
            </batchtest>
            
          </junit>
        
        </j:otherwise>
      </j:choose>
    </j:if>
    
    <j:if test="${!unitTestSourcesPresent}">
      <echo>No tests to run.</echo>
    </j:if>

  </goal>

  <goal name="test:single-test"
        description="[deprecated] please use the test:single goal instead">
        
		<echo>[deprecated] please use the test:single goal instead</echo>
		        
		<attainGoal name="test:single"/>
  </goal>

  <goal name="test:match-test"
        description="[deprecated] please use the test:match goal instead">

		<echo>[deprecated] please use the test:match goal instead</echo>
		
		<attainGoal name="test:match"/>
  </goal>
		        
  <!-- ================================================================== -->
  <!-- T E S T  R E S O U R C E S                                         -->
  <!-- ================================================================== -->

  <goal name="test:test-resources"
        description="Copy any resources that must be present for run tests"
        prereqs="test:prepare-filesystem">

    <j:if test="${maven.has.test.resource.patterns}">

      <!-- Copy any resources that must be present for run tests. -->

      <copy todir="${maven.test.dest}">
        <j:forEach var="res" items="${pom.build.testResources}">
          <fileset dir="${res.directory}">
            <j:forEach var="inc" items="${res.includes}">
              <include name="${inc}"/>
            </j:forEach>
            <j:forEach var="exc" items="${res.excludes}">
              <exclude name="${exc}"/>
            </j:forEach>
          </fileset>
        </j:forEach>
      </copy>
    </j:if>
  </goal>

</project>
